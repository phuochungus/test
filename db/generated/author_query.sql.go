// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: author_query.sql

package sqlcGen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (id, name)
VALUES ($1, $2)
RETURNING id, name
`

type CreateAuthorParams struct {
	ID   int64  `binding:"-" db:"id" json:"id"`
	Name string `binding:"required" db:"name" json:"name" validate:"required"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.ID, arg.Name)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name
FROM authors
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getAuthorByName = `-- name: GetAuthorByName :one
SELECT id, name
FROM authors
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetAuthorByName(ctx context.Context, name string) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthorByName, name)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name
FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
SET name = coalesce($1, name)
WHERE id = $2::BIGINT
RETURNING id, name
`

type UpdateAuthorParams struct {
	Name pgtype.Text `binding:"required" db:"name" json:"name" validate:"required"`
	ID   int64       `db:"id" json:"id"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, updateAuthor, arg.Name, arg.ID)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
